import{_ as e,c as l,o as t,a as i}from"./app.c4aa1f4f.js";const h=JSON.parse('{"title":"css相关知识","description":"","frontmatter":{"title":"css相关知识"},"headers":[{"level":2,"title":"什么是bfc?","slug":"什么是bfc","link":"#什么是bfc","children":[]},{"level":2,"title":"flex布局","slug":"flex布局","link":"#flex布局","children":[]}],"relativePath":"front/css/flex布局.md","lastUpdated":1673364519000}'),o={name:"front/css/flex布局.md"},r=i('<h2 id="什么是bfc" tabindex="-1">什么是bfc? <a class="header-anchor" href="#什么是bfc" aria-hidden="true">#</a></h2><p>bfc形成一块盒子，盒子内的布局，不管是float还是position，都不会影响bfc之外的布局。</p><p>哪些元素有bfc的条件？<br> display: block list-item table</p><p>怎么触发bfc?</p><ul><li>float 的值不为none。</li><li>position 的值不为static或者relative。</li><li>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个。</li><li>overflow的值不为visible。</li></ul><p>bfc特征？</p><ul><li>bfc盒子内部box是垂直排列的</li><li>box垂直方向的距离由margin决定，同一个bfc内部两个相邻Box的margin会发生重叠</li><li>bfc盒子的border内边框左侧与box接触</li><li>bfc的区域不会与float box重叠，而是紧贴浮动边缘</li><li>bfc是个独立容器，里面元素不会影响外面元素</li><li>计算bfc高度时，浮动元素也参与计算</li></ul><p>bfc用途？</p><ul><li>清除元素内部浮动(计算bfc高度时，浮动元素也参与计算),给父元素添加触发bfc条件</li><li>解决margin合并的问题，同一个bfc内部两个box的margin会有合并的问题，可以在bfc内部其中一个box包裹一层也触发bfc就会解决合并问题</li><li>用于布局，盒子内box1是浮动，box2触发bfc就可以实现box2的自适应布局</li></ul><p>示例：</p><iframe src="https://codesandbox.io/s/css-bfc-6zpce"></iframe><ol start="2"><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events" target="_blank" rel="noreferrer">pointer-events</a></li><li><a href="https://blog.csdn.net/pinena/article/details/89708024" target="_blank" rel="noreferrer">css3 实现优惠券效果（向内凹的圆）</a></li></ol><h2 id="flex布局" tabindex="-1">flex布局 <a class="header-anchor" href="#flex布局" aria-hidden="true">#</a></h2><p>父元素和子元素各6个</p><p><strong>父元素</strong></p><ul><li><p>flex-direction: <code>row | row-reverse | column | column-reverse</code>; flex-direction属性决定主轴的方向</p></li><li><p>flex-wrap: <code>nowrap | wrap | wrap-reverse</code>; 默认情况下，项目都排在一条线（又称”轴线”）上。</p></li><li><p>flex-flow: <code>&lt;flex-direction&gt; &lt;flex-wrap&gt;</code> flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap;</p></li><li><p>justify-content: <code>flex-start | flex-end | center | space-between | space-around</code>; justify-content属性定义了项目在主轴上的对齐方式</p></li><li><p>align-items: <code>flex-start | flex-end | center | baseline | stretch</code>; align-items属性定义项目在交叉轴上如何对齐,baseline项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</p></li><li><p>align-content: <code>flex-start | flex-end | center | space-between | space-around | stretch</code>; align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 意思就是子项单行无效果，多行才有效果</p></li></ul><p><strong>子元素</strong></p><ul><li>order: <code>&lt;integer&gt;</code> order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0;</li><li>flex-grow:<code>&lt;number&gt;; /* default 0 */</code> flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li>flex-shrink: <code>&lt;number&gt;; /* default 1 */ </code> flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li>flex-basis: <code>&lt;length&gt; | auto; /* default auto */</code> <a href="https://www.jianshu.com/p/17b1b445ecd4" target="_blank" rel="noreferrer">Flex Basis 与 Width 的区别</a></li><li>flex:<code>none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</code> flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</li><li>align-self: <code>auto | flex-start | flex-end | center | baseline | stretch;</code></li></ul><p>示例：</p><iframe src="https://codesandbox.io/s/css-flex-fmue3"></iframe>',20),c=[r];function a(n,s,f,d,p,b){return t(),l("div",null,c)}const u=e(o,[["render",a]]);export{h as __pageData,u as default};
