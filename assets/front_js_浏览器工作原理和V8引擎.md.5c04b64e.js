import{_ as l,c as a,o as s,a as e}from"./app.c4aa1f4f.js";const i="/assets/image_Rc6YRqi_45.cdc96f63.png",t="/assets/image_rRQSVJ7_aq.23eab200.png",r="/assets/d__drawio_js高级_浏览器原理_ee_XpCoqY5JBB.fef22f6a.png",n="/assets/Wx90M7DlxzVdXEeg5UhL_9yZ0l67DIo.6135a864.png",o="/assets/W6kFjvrwk1yDEhs8lFm1_gRUQE1f4Sm.d0435b76.png",p="/assets/9M8aKlSl3207o9C3QVVp__lhQKAolp8.6ad31fdd.png",c="/assets/ICtmZ85CWgSJ7UZjomd1_GSUavtXtfz.41707dd4.png",h="/assets/x5h2ZL6SWI1vF5jSa8YB_bLxmmSrHEL.5a676bcf.svg",d="/assets/OdFbLc2ufRmkJoHinTUL_rtLSm0I3Xn.0f10fd2e.svg",u="/assets/d__drawio_js高级_浏览器原理_2.cpu进程_9VBmqhwapx.cf54ea6a.png",g="/assets/vl5sRzL8pFwlLSN7WW12_uUfh4o4cNu.04d6ceaf.png",A="/assets/d__drawio_js高级_浏览器原理_3.浏览器架构_U4hcs3NSy9.292e1580.png",E="/assets/image_TW-v3Enwyy.f82d4bc2.png",C="/assets/image_rLJrub_QFr.d8d69bda.png",_="/assets/image_Rh0s_cU5fV.3600054b.png",m="/assets/image_oKVmZ9X8dq.ff2e2ad0.png",f="/assets/image_dGjKIIrVod.2af37485.png",F="/assets/image_X3v84vVsT1.11705a30.png",y="/assets/image_Fevjz8WvOQ.d0c5177a.png",b="/assets/image_syrrc4nKQ8.c68a18ee.png",B="/assets/d__drawio_js高级_浏览器原理_4.导航发生了啥_tNB5c9hrZC.00920e5e.png",D="/assets/image_FBnUmj1JSt.9717ff6c.png",v="/assets/d__drawio_js高级_浏览器原理_5.渲染过程_cIrtvvUA0M.3cf226df.png",S="/assets/d__drawio_js高级_浏览器原理_6.v8架构_P_GRk26gaw.21d44b4f.png",k="/assets/d__drawio_js高级_浏览器原理_7.v8架构流程_7gl_kXHBS7.bc45b57a.png",L=JSON.parse('{"title":"浏览器工作原理和V8引擎","description":"","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"语言特性","slug":"语言特性","link":"#语言特性","children":[]},{"level":2,"title":"浏览器发展史","slug":"浏览器发展史","link":"#浏览器发展史","children":[{"level":3,"title":"第一浏览器大战","slug":"第一浏览器大战","link":"#第一浏览器大战","children":[]},{"level":3,"title":"第二次浏览器大战","slug":"第二次浏览器大战","link":"#第二次浏览器大战","children":[]},{"level":3,"title":"2010年到现在","slug":"_2010年到现在","link":"#_2010年到现在","children":[]},{"level":3,"title":"js语言发展","slug":"js语言发展","link":"#js语言发展","children":[]}]},{"level":2,"title":"CPU、GPU、内存和多进程","slug":"cpu、gpu、内存和多进程","link":"#cpu、gpu、内存和多进程","children":[{"level":3,"title":"CPU","slug":"cpu","link":"#cpu","children":[]},{"level":3,"title":"GPU","slug":"gpu","link":"#gpu","children":[]},{"level":3,"title":"启动程序","slug":"启动程序","link":"#启动程序","children":[]},{"level":3,"title":"运行程序","slug":"运行程序","link":"#运行程序","children":[]}]},{"level":2,"title":"浏览器架构","slug":"浏览器架构","link":"#浏览器架构","children":[{"level":3,"title":"单进程浏览器","slug":"单进程浏览器","link":"#单进程浏览器","children":[]},{"level":3,"title":"多进程浏览器","slug":"多进程浏览器","link":"#多进程浏览器","children":[]},{"level":3,"title":"渲染进程中的线程","slug":"渲染进程中的线程","link":"#渲染进程中的线程","children":[]}]},{"level":2,"title":"导航时候发生了什么？","slug":"导航时候发生了什么","link":"#导航时候发生了什么","children":[{"level":3,"title":"渲染进程来绘制⻚面","slug":"渲染进程来绘制⻚面","link":"#渲染进程来绘制⻚面","children":[]},{"level":3,"title":"确认导航","slug":"确认导航","link":"#确认导航","children":[]},{"level":3,"title":"加载完成","slug":"加载完成","link":"#加载完成","children":[]},{"level":3,"title":"额外的步骤：初始加载完毕","slug":"额外的步骤-初始加载完毕","link":"#额外的步骤-初始加载完毕","children":[]}]},{"level":2,"title":"渲染过程","slug":"渲染过程","link":"#渲染过程","children":[{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]}]},{"level":2,"title":"V8引擎","slug":"v8引擎","link":"#v8引擎","children":[]}],"relativePath":"front/js/浏览器工作原理和V8引擎.md","lastUpdated":1673582226000}'),U={name:"front/js/浏览器工作原理和V8引擎.md"},j=e('<h1 id="浏览器工作原理和v8引擎" tabindex="-1">浏览器工作原理和V8引擎 <a class="header-anchor" href="#浏览器工作原理和v8引擎" aria-hidden="true">#</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-hidden="true">#</a></h2><ul><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8Cv8%E5%BC%95%E6%93%8E">浏览器工作原理和V8引擎</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">语言特性</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E5%B1%95%E5%8F%B2">浏览器发展史</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98"><strong>第一浏览器大战</strong></a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98">第二次浏览器大战</a></li><li><a href="#2010%E5%B9%B4%E5%88%B0%E7%8E%B0%E5%9C%A8"><strong>2010年到现在</strong></a></li><li><a href="#js%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95"><strong>js语言发展</strong></a></li></ul></li><li><a href="#cpugpu%E5%86%85%E5%AD%98%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B">CPU、GPU、内存和多进程</a><ul><li><a href="#cpu"><strong>CPU</strong></a></li><li><a href="#gpu"><strong>GPU</strong></a></li><li><a href="#%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F">启动程序</a></li><li><a href="#%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F">运行程序</a></li></ul></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84">浏览器架构</a><ul><li><a href="#%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8">单进程浏览器</a></li><li><a href="#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8">多进程浏览器</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B"><strong>渲染进程中的线程</strong></a></li></ul></li><li><a href="#%E5%AF%BC%E8%88%AA%E6%97%B6%E5%80%99%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88">导航时候发生了什么？</a><ul><li><a href="#-%E5%A4%84%E7%90%86%E8%BE%93%E5%85%A5"> 处理输入</a></li><li><a href="#%E5%BC%80%E5%A7%8B%E5%AF%BC%E8%88%AA">开始导航</a></li><li><a href="#%E8%AF%BB%E5%8F%96%E5%93%8D%E5%BA%94">读取响应</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E6%9D%A5%E7%BB%98%E5%88%B6%E9%9D%A2">渲染进程来绘制⻚面</a></li><li><a href="#%E7%A1%AE%E8%AE%A4%E5%AF%BC%E8%88%AA">确认导航</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90">加载完成</a></li><li><a href="#%E9%A2%9D%E5%A4%96%E7%9A%84%E6%AD%A5%E9%AA%A4%E5%88%9D%E5%A7%8B%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%AF%95">额外的步骤：初始加载完毕</a></li></ul></li><li><a href="#%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B-">渲染过程 </a><ul><li><a href="#%E6%AD%A5%E9%AA%A4">步骤</a></li></ul></li><li><a href="#v8%E5%BC%95%E6%93%8E">V8引擎</a><ul><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81js%E5%BC%95%E6%93%8E"><strong>为什么需要js引擎</strong></a></li><li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84js%E5%BC%95%E6%93%8E"><strong>常见的js引擎</strong></a></li><li><a href="#webkit%E5%86%85%E6%A0%B8"><strong>webkit内核</strong></a></li><li><a href="#v8%E5%BC%95%E6%93%8E-1"><strong>V8引擎</strong></a></li></ul></li></ul></li></ul><p><img src="'+i+'" alt=""></p><h2 id="语言特性" tabindex="-1">语言特性 <a class="header-anchor" href="#语言特性" aria-hidden="true">#</a></h2><ul><li>机器语言 01011001指令</li><li>汇编语言 助记符代替指令</li><li>高级语言 Java c c++ JavaScript</li></ul><p><img src="'+t+'" alt=""></p><h2 id="浏览器发展史" tabindex="-1">浏览器发展史 <a class="header-anchor" href="#浏览器发展史" aria-hidden="true">#</a></h2><ul><li>1990年 蒂姆.伯纳斯李发明 world wide web 浏览器，<a href="http://info.cern.ch" title="http://info.cern.ch" target="_blank" rel="noreferrer">http://info.cern.ch</a></li></ul><h3 id="第一浏览器大战" tabindex="-1"><strong>第一浏览器大战</strong> <a class="header-anchor" href="#第一浏览器大战" aria-hidden="true">#</a></h3><ul><li>1993年网景公司，马克安德森和同事开发mosaic浏览器后改名Netscape浏览器，用户广泛使用。 <ul><li>1995年5月livescript诞生，第一个js脚本。</li><li>1995年12月网景与sun（Java语音所有者）合作，明明为JavaScript。</li></ul></li><li>1996年微软退出IE浏览器捆绑windows操作系统，网景浏览器被挤出市场。</li><li>1996年网景提交源码内核给国际标准组织ECMA抵抗微软。 <ul><li>1997年ECMA发布标准文件第一版，规定浏览器脚本语言标准并将语言称为ECMAScript。</li><li>1998年美国在线公司收购网景业务，gecko内核开放源码。</li><li>2003年解散网景，停止开发浏览器。</li><li>2001年微软退出windows XP内置IE6，js引擎抽离出来。</li></ul></li></ul><h3 id="第二次浏览器大战" tabindex="-1">第二次浏览器大战 <a class="header-anchor" href="#第二次浏览器大战" aria-hidden="true">#</a></h3><ul><li>1998年网景成立Mozilla基金会，基于gecko内核准备开发新的浏览器</li><li>2003年苹果公司基于KHTML引擎开发出webkit内核浏览器Safari。</li><li>2004年Mozilla发布全新浏览器Firefox。</li><li>2005年苹果开源webkit内核。</li><li>2008年谷歌基于苹果的webkit内核开发chromium内核的Chrome浏览器，推出v8引擎，nodejs基于v8得到发展，前端工程化发展的开端。</li></ul><p>Mozilla的火狐、Chrome、IE浏览器三足鼎立。</p><h3 id="_2010年到现在" tabindex="-1"><strong>2010年到现在</strong> <a class="header-anchor" href="#_2010年到现在" aria-hidden="true">#</a></h3><ul><li>2013年谷歌与webkit分离，基于chromium项目开发blink引擎。</li><li>2015年window10发布，微软推出全新浏览器Microsoft Edge取代IE。</li><li>2017年Mozilla全新的打造的 <a href="https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Quantum_(Mozilla)" title="Quantum" target="_blank" rel="noreferrer">Quantum</a> 版本</li><li>目前Chrome占据绝对优势。</li></ul><h3 id="js语言发展" tabindex="-1"><strong>js语言发展</strong> <a class="header-anchor" href="#js语言发展" aria-hidden="true">#</a></h3><ul><li>1995年Brendan Eich只用了10天完成语言设计，语法来源 <ol><li>基本语法：借鉴 C 语言和 Java 语言。</li><li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li><li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li><li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li><li>正则表达式：借鉴 Perl 语言。</li><li>字符串和数组处理：借鉴 Python 语言。</li></ol></li><li>1997年7月，ECMAScript 1.0发布</li><li>1998年6月，ECMAScript 2.0版发布。</li><li>1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。</li><li>2009年12月，ECMAScript 5.0版 正式发布。</li><li>2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。</li><li>TC39委员会计划每年发布一个版本，命名按照ECMAScript年份。</li></ul><p><img src="'+r+'" alt=""></p><h2 id="cpu、gpu、内存和多进程" tabindex="-1">CPU、GPU、内存和多进程 <a class="header-anchor" href="#cpu、gpu、内存和多进程" aria-hidden="true">#</a></h2><p>为了了解浏览器运行的环境，我们需要了解几个计算机部件以及它们的作用。</p><h3 id="cpu" tabindex="-1"><strong>CPU</strong> <a class="header-anchor" href="#cpu" aria-hidden="true">#</a></h3><p><strong>中央处理器（Central Processing Unit）</strong>，或简称为 <strong>CPU</strong>。CPU 可以看作是计算机的大脑。一个 CPU 核心如图中的办公人员，可以逐一解决很多不同任务。</p><p><img src="'+n+'" alt=""></p><p>4 个 CPU 核心作为办公人员，坐在办公桌前处理各自的工作</p><h3 id="gpu" tabindex="-1"><strong>GPU</strong> <a class="header-anchor" href="#gpu" aria-hidden="true">#</a></h3><p><strong>图形处理器</strong>（<strong>Graphics Processing Unit</strong>，简称为 <strong>GPU</strong>）是计算机的另一部件。与 CPU 不同，GPU 擅长同时处理跨内核的简单任务。顾名思义，它最初是为解决图形而开发的。</p><p><img src="'+o+'" alt=""></p><p> 许多带特定扳手的 GPU 内核意味着它们只能处理有限任务</p><h3 id="启动程序" tabindex="-1">启动程序 <a class="header-anchor" href="#启动程序" aria-hidden="true">#</a></h3><p>当你在电脑或手机上启动应用时，是 CPU 和 GPU 为应用供能。通常情况下应用是通过操作系统提供的机制在 CPU 和 GPU 上运行。</p><p><img src="'+p+'" alt=""></p><p> 三层计算机体系结构。底部是机器硬件，中间是操作系统，顶部是应用程序。</p><h3 id="运行程序" tabindex="-1">运行程序 <a class="header-anchor" href="#运行程序" aria-hidden="true">#</a></h3><p><img src="'+c+'" alt=""></p><p> 进程作为边界框，线程作为抽象鱼在进程中游动</p><p>进程可以被描述为是一个应用的执行程序。线程存在于进程并执行程序任意部分。</p><p>启动应用时会创建一个进程。程序也许会创建一个或多个线程来帮助它工作，这是可选的。操作系统为进程提供了一个可以使用的“一块”内存，所有应用程序状态都保存在该私有内存空间中。关闭应用程序时，相应的进程也会消失，操作系统会释放内存</p><p><img src="'+h+'" alt=""></p><p>换种说法：进程可以类比为工厂，线程就是工厂里面的工人，一个工厂可以包含一个或者多个工人，工人之间可以相互协作，并且共享工作空间</p><p>进程可以请求操作系统启动另一个进程来执行不同的任务。此时，内存中的不同部分会分给新进程。如果两个进程需要对话，他们可以通过<strong>进程间通信</strong>（<strong>IPC</strong>）来进行。许多应用都是这样设计的，所以如果一个工作进程失去响应，该进程就可以在不停止应用程序不同部分的其他进程运行的情况下重新启动。</p><p><img src="'+d+'" alt=""></p><p> 独立进程通过 IPC 通信示意图</p><ul><li>下面一图看下内存、进程和线程</li></ul><p><img src="'+u+'" alt=""></p><h2 id="浏览器架构" tabindex="-1">浏览器架构 <a class="header-anchor" href="#浏览器架构" aria-hidden="true">#</a></h2><h3 id="单进程浏览器" tabindex="-1">单进程浏览器 <a class="header-anchor" href="#单进程浏览器" aria-hidden="true">#</a></h3><ul><li>不稳定 <ul><li>其中一个线程卡死，可能会导致整个程序出问题，比如打开多个标签页，其中一个标签页卡死可能会导致整个浏览器无法正常运行</li><li>码或插件崩溃导致整个浏览器崩溃</li></ul></li><li>不流畅 <ul><li>浏览器一个进程里是可以共享数据的，那JS线程岂不是可以随意访问浏览器进程内的所有数据，这显然不合理</li><li>比如内存泄漏整个浏览器卡死，不管是不是当前tab页面。</li></ul></li><li>不安全 <ul><li>一个进程需要负责太多事情，会导致运行效率问题</li><li>一个运行页面，插件携带病毒，泄漏账号密码，没有隔离。</li></ul></li></ul><h3 id="多进程浏览器" tabindex="-1">多进程浏览器 <a class="header-anchor" href="#多进程浏览器" aria-hidden="true">#</a></h3><ul><li>浏览器进程 <ul><li> 负责控制浏览器除标签页外的界面，包括地址栏、书签、前进后退按钮等，以及负责与其他进程的协调工作，同时提供存储功能</li></ul></li><li>GPU进程 <ul><li>责整个浏览器界面的渲染。Chrome刚开始发布的时候是没有GPU进程的，而使用GPU的初衷是为了实现3D CSS效果，只是后面网页、Chrome的UI界面都用GPU来绘制，这使GPU成为浏览器普遍的需求，最后Chrome在多进程架构上也引入了GPU进程</li></ul></li><li>网络进程 <ul><li>负责发起和接受网络请求，以前是作为模块运行在浏览器进程一时在面的，后面才独立出来，成为一个单独的进程</li></ul></li><li>插件进程 <ul><li>主要是负责插件的运行，因为插件可能崩溃，所以需要通过插件进程来隔离，以保证插件崩溃也不会对浏览器和页面造成影响</li></ul></li><li>渲染进程 <ul><li>负责控制显示tab标签页内的所有内容，核心任务是将HTML、CSS、JS转为用户可以与之交互的网页，排版引擎Blink和JS引擎V8都是运行在该进程中，默认情况下Chrome会为每个Tab标签页创建一个渲染进程</li></ul></li></ul><p><img src="'+g+'" alt=""></p><p> 不同进程指向浏览器 UI 的不同部分</p><p><img src="'+A+'" alt=""></p><ul><li>优点： <ul><li>某一渲染进程出问题不会影响其他进程</li><li>为安全，在系统层面上限定了不同进程的权限</li></ul></li><li>缺点： <ul><li>由于不同进程间的内存不共享，不同进程的内存常常需要包含相同的内容。</li></ul></li></ul><h3 id="渲染进程中的线程" tabindex="-1"><strong>渲染进程中的线程</strong> <a class="header-anchor" href="#渲染进程中的线程" aria-hidden="true">#</a></h3><ul><li>GUI渲染线程 <ul><li>负责渲染页面，解析html和CSS、构建DOM树、CSSOM树、渲染树、和绘制页面，重绘重排也是在该线程执行</li></ul></li><li>JS引擎线程 <ul><li>一个tab页中只有一个JS引擎线程(单线程)，负责解析和执行JS。它GUI渲染进程不能同时执行，只能一个一个来，如果JS执行过长就会导致阻塞掉帧</li></ul></li><li>计时器线程 <ul><li>指setInterval和setTimeout，因为JS引擎是单线程的，所以如果处于阻塞状态，那么计时器就会不准了，所以需要单独的线程来负责计时器工作</li></ul></li><li>异步http请求线程 <ul><li>XMLHttpRequest连接后浏览器开的一个线程，比如请求有回调函数，异步线程就会将回调函数加入事件队列，等待JS引擎空闲执行</li></ul></li><li>事件触发线程 <ul><li>主要用来控制事件循环，比如JS执行遇到计时器，AJAX异步请求等，就会将对应任务添加到事件触发线程中，在对应事件符合触发条件触发时，就把事件添加到待处理队列的队尾，等JS引擎处理</li></ul></li></ul><h2 id="导航时候发生了什么" tabindex="-1">导航时候发生了什么？ <a class="header-anchor" href="#导航时候发生了什么" aria-hidden="true">#</a></h2><h4 id="处理输入" tabindex="-1"> 处理输入 <a class="header-anchor" href="#处理输入" aria-hidden="true">#</a></h4><ul><li>UI线程判断用户输入的是URL还是查询</li></ul><p><img src="'+E+'" alt=""></p><h4 id="开始导航" tabindex="-1">开始导航 <a class="header-anchor" href="#开始导航" aria-hidden="true">#</a></h4><ul><li>当用戶按下回⻋键的时候，UI线程会通知网络进程初始化一个网络请求来获取站点的内容。 这时候tab上的icon会展示一个提示资源正在加载中的旋转圈圈，而且网络进程会进行一系列诸如DNS寻址以及为请求建立TLS连接的操作。 <blockquote><p>这时如果网络进程收到服务器的HTTP 301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p></blockquote></li></ul><p><img src="'+C+'" alt=""></p><h4 id="读取响应" tabindex="-1">读取响应 <a class="header-anchor" href="#读取响应" aria-hidden="true">#</a></h4><ul><li>响应类型判断 <ul><li>网络进程在收到HTTP响应的主体时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型(MIME Type)。 响应主体的媒体类型一般可以通过HTTP头部的Content-Type来确定，不过Content-Type有时候会缺失或者是错误的，这种情况下浏览器就要进行MIME类型嗅探来确定响应类型了。 这里可以打开一个窗口, 看一下Content-type响应头</li></ul></li></ul><p><img src="'+_+'" alt=""></p><ul><li>不同响应类型的处理 <ul><li>如果响应的主体是一个HTML文件，浏览器会将获取的响应数据交给渲染进程(renderer process) 来进行下一步的工作。如果拿到的响应数据是一个压缩文件(zip file)或者其他类型的文件，响应数据就会交给下载管理器 (download manager)来处理。</li></ul></li></ul><p><img src="'+m+'" alt=""></p><ul><li><p>安全检查</p><p>网络进程在把内容交给渲染进程之前还会对内容做SafeBrowsing检查。</p><p>如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络进程会给用戶展示一个警告的⻚面。除此之外，网络进程还会做CORB(Cross Origin Read Blocking)检查来确定那些敏感的跨站数据.</p></li></ul><h3 id="渲染进程来绘制⻚面" tabindex="-1">渲染进程来绘制⻚面 <a class="header-anchor" href="#渲染进程来绘制⻚面" aria-hidden="true">#</a></h3><p>在网络进程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉UI线程所 有的数据都已经被准备好了。</p><p>UI线程在收到网络进程的确认后会为这个网站寻找一个渲染进程(renderer process)来渲染界面。</p><p>因为网络请求的耗时可能会很⻓, 所以第二步中当UI线程发送URL链接给网络进程后，它其实已经知 晓它们要被导航到哪个站点了。</p><p>所以在网络进程干活的时候，UI线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话(没有重定向之类的东西出现)，网络进程准备好数据后⻚面的渲染进程已经就准备好了，这就 节省了新建渲染进程的时间。</p><p>不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。</p><p><img src="'+f+'" alt=""></p><h3 id="确认导航" tabindex="-1">确认导航 <a class="header-anchor" href="#确认导航" aria-hidden="true">#</a></h3><p> 到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程(browser process)会通过IPC告诉渲染进程去提交本次导航(commit navigation)。</p><p>除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的HTML数据。</p><p>一旦浏览器进程收到渲染线程的回复说导航已经被提交了(commit)，导航这个过程就结束了，文档的加载阶段(document loading phase)会正式开始。</p><p>到了这个时候，导航栏会被更新，安全指示符和站点设置会展示新⻚面相关的站点信息。 当前tab的会话历史(session history)也会被更新，这样当你点击浏览器的前进和后退按钮也可以 导航到刚刚导航完的⻚面。为了方便你在关闭了tab或窗口(window)的时候还可以恢复当前tab和 会话(session)内容，当前的会话历史会被保存在磁盘上面。</p><p><img src="'+F+'" alt=""></p><h3 id="加载完成" tabindex="-1">加载完成 <a class="header-anchor" href="#加载完成" aria-hidden="true">#</a></h3><p>当导航提交完成后，渲染进程开始着手加载资源以及渲染⻚面。</p><p>一旦渲染进程完成渲染(load)，它会通过IPC告知浏览器进程，然后UI线程就会停止导航栏上的loading</p><p><img src="'+y+'" alt=""></p><h3 id="额外的步骤-初始加载完毕" tabindex="-1">额外的步骤：初始加载完毕 <a class="header-anchor" href="#额外的步骤-初始加载完毕" aria-hidden="true">#</a></h3><p>一旦导航别提交，渲染进程开始加载资源和渲染页面，一旦渲染进程渲染完毕，会发送IPC返回给浏览器进程，（这也会所有frameh和onload事件已经触发和执行完毕后发生）。这时，UI线程停止标签页上的加载动画。</p><p><img src="'+b+'" alt=""></p><ul><li>整体流程</li></ul><p><img src="'+B+'" alt=""></p><h2 id="渲染过程" tabindex="-1">渲染过程 <a class="header-anchor" href="#渲染过程" aria-hidden="true">#</a></h2><p><img src="'+D+`" alt=""></p><p>当我们在浏览器上输入网址去访问一个页面时大题概括如下：</p><ol><li>首先会将域名通过DNS解析成ip地址（服务器地址）</li><li>服务器会为我们返回index.html</li><li>浏览器去解析index.html，遇到link标签时去下载css资源，遇到script标签时去下载js文件</li></ol><ul><li>至此，资源已下载完毕，那么谁来解析HTML并将内容呈现出来呢？——<strong>那就是浏览器内核了</strong></li><li>而JavaScript是一门高级的编程语言，但计算机不认识高级语言，高级语言需要被编译为机器指令来被CPU执行，这又是谁来解析、执行JS代码的呢？——<strong>那就是JS引擎了</strong></li></ul><p><strong>浏览器内核既是渲染引擎（layout engineer或Rendering Engine）或者排版引擎和js引擎</strong>。</p><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-hidden="true">#</a></h3><ul><li>首先内核通过<strong>HTML Parser</strong>将HTML转化为<strong>DOM Tree</strong><ul><li>html parser解析过程： <ol><li> ① 开始标签 ② 结束标签 ③ 自封闭标签 解析html标签</li><li>解析完成都会生成对应的token，另外会解析文本、属性等也会与对应的token</li><li>每个token都有对应的type，文本就是text，开始标签就是startTag，结束标签就是endTag，最后使用token组合构建dom。 <a href="https://xie.infoq.cn/article/6a511f0ebdb6e555a5438c2fe" title="实战中学习浏览器工作原理 — HTML 解析与 CSS 计算" target="_blank" rel="noreferrer">实战中学习浏览器工作原理 — HTML 解析与 CSS 计算</a> AST语法树 <a href="https://astexplorer.net/" title="https://astexplorer.net/" target="_blank" rel="noreferrer">https://astexplorer.net/</a></li></ol></li></ul></li><li>内核再通过<strong>CSS Parser</strong>对CSS进行解析为 <strong>Style Rules</strong><ul><li>需要加载的样式表 style link line 浏览器默认样式表</li><li><a href="https://github.com/chromium/chromium/blob/main/third_party/blink/renderer/core/html/resources/html.css" title="浏览器默认样式" target="_blank" rel="noreferrer">浏览器默认样式</a>body 默认样式 margin：8px</li><li>有些标签不显示原因<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">base</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">basefont</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datalist</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">head</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">link</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">meta</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">noembed</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">noframes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">param</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">script</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">style</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">title</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li>然后将DOM Tree 与 Style Rules<strong>附加在一起生成渲染树</strong>Render Tree（DOM Tree + Style Rules -&gt; Render Tree）</li><li>再对RenderTree进行<strong>布局</strong>生成最后的RenderTree</li><li>最后将RenderTree进行<strong>绘制</strong>，展示出来</li></ul><p><img src="`+v+'" alt=""></p><p>另外两个重要概念：重绘与回流</p><ul><li><strong>重排（回流）</strong></li><li>当我们的操作引发了 DOM 树中几何尺寸的变化（改变元素的大小、位置、布局方式等），这时渲染树里有改动的节点和它影响的节点都要重新计算。这个过程就叫做重排，也称为回流。在改动发生时，要重新经历页面渲染的整个流程，所以开销是很大的。</li><li>以下操作都会导致页面重排： <ul><li>页面首次渲染。</li><li>浏览器窗口大小发生变化。</li><li>元素的内容发生变化。</li><li>元素的尺寸或者位置发生变化。</li><li>元素的字体大小发生变化。</li><li>激活CSS伪类。</li><li>查询某些属性或者调用某些方法。</li><li>添加或者删除可见的DOM元素。 在触发重排时，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：</li><li>全局范围：从根节点开始，对整个渲染树进行重新布局。</li><li>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局。</li></ul></li><li><strong>重绘</strong></li><li>当对 DOM 的修改导致了样式的变化、但未影响其几何属性（比如修改颜色、背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（会跳过重排环节），这个过程叫做重绘。简单来说，重绘是由对元素绘制属性的修改引发的。</li><li>当我们修改元素绘制属性时，页面布局阶段不会执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。</li></ul><p><strong>注意：</strong> 当触发重排时，一定会触发重绘，但是重绘不一定会引发重排。</p><ul><li>每个tab都有独立的渲染进程</li><li>每个iframe都是独立的渲染进程</li><li>chrome右上角菜单-更多-任务管理器查看更多进程</li></ul><p>console.<code>dir</code>（document）输出dom对象</p><h2 id="v8引擎" tabindex="-1">V8引擎 <a class="header-anchor" href="#v8引擎" aria-hidden="true">#</a></h2><h4 id="为什么需要js引擎" tabindex="-1"><strong>为什么需要js引擎</strong> <a class="header-anchor" href="#为什么需要js引擎" aria-hidden="true">#</a></h4><p>js代码最终需要转换为机器CPU识别的代码011001等，那就需要js引擎处理。</p><h4 id="常见的js引擎" tabindex="-1"><strong>常见的js引擎</strong> <a class="header-anchor" href="#常见的js引擎" aria-hidden="true">#</a></h4><ul><li>SpiderMonkey：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；</li><li>Chakra：微软开发，用于IT浏览器；</li><li>JavaScriptCore：WebKit中的JavaScript引擎，Apple公司开发；</li><li>V8：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；</li></ul><h4 id="webkit内核" tabindex="-1"><strong>webkit内核</strong> <a class="header-anchor" href="#webkit内核" aria-hidden="true">#</a></h4><p>事实上WebKit内核由两部分组成的：</p><ul><li>WebCore：负责HTML解析、布局、渲染等等相关的工作;</li><li>JavaScriptCore：解析、执行JavaScript代码(JavaScript引擎的工作);</li></ul><h4 id="v8引擎-1" tabindex="-1"><strong>V8引擎</strong> <a class="header-anchor" href="#v8引擎-1" aria-hidden="true">#</a></h4><ul><li>支持语言：V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等; <ul><li>V8可以运行JavaScript和WebAssembly引擎编译的汇编语言等</li></ul></li><li>跨平台：它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32，</li></ul><p>ARM或MIPS处理器的Linux系统上运行;</p><ul><li>嵌入式：V8可以独立运行，也可以嵌入到任何C ++应用程序中;</li></ul><blockquote><p><strong>AST语法树</strong></p><p><a href="https://juejin.cn/post/7045496002614132766" title="Babel &amp; AST（抽象语法树）" target="_blank" rel="noreferrer">Babel &amp; AST（抽象语法树）</a></p></blockquote><p><strong>架构解释</strong></p><p><img src="'+S+'" alt=""></p><ul><li><strong>Parse</strong><ul><li>V8官方文档：<a href="https://v8.dev/blog/scanner" title="https://v8.dev/blog/scanner" target="_blank" rel="noreferrer">https://v8.dev/blog/scanner</a></li><li><a href="https://juejin.cn/post/7045496002614132766" title="Babel &amp; AST（抽象语法树）" target="_blank" rel="noreferrer">Babel &amp; AST（抽象语法树）</a></li></ul></li><li><strong>Ignition</strong><ul><li>V8官方文档：<a href="https://v8.dev/blog/ignition-interpreter" title="https://v8.dev/blog/ignition-interpreter" target="_blank" rel="noreferrer">https://v8.dev/blog/ignition-interpreter</a></li></ul></li><li><strong>TurboFan</strong><ul><li>V8官方文档：<a href="https://v8.dev/blog/turbofan-jit" title="https://v8.dev/blog/turbofan-jit" target="_blank" rel="noreferrer">https://v8.dev/blog/turbofan-jit</a></li></ul></li></ul><p>上面是JavaScript代码的执行过程，事实上V8的内存回收也是其强大的另外一个原因;</p><ul><li>Orinoco模块，负责垃圾回收，将程序中不需要的内存回收;</li><li>Orinoco的V8官方文档：<a href="https://v8.dev/blog/trash-talk" title="https://v8.dev/blog/trash-talk" target="_blank" rel="noreferrer">https://v8.dev/blog/trash-talk</a></li></ul><p><strong>整体流程</strong></p><p><img src="'+k+`" alt=""></p><ol><li>首先，V8对JS源代码进行词法分析、语法分析<strong>生成AST抽象语法树</strong><ul><li><strong>词法分析</strong>：生成tokens数组，tokens数组由多个对象组成，对象中包含了type与value等（如：{ type: &#39;keywords&#39;, value: &#39;const&#39;}）</li><li><strong>语法分析</strong>：对其中的每个对象进行分析，根据其type分析成具体的语法，生成AST抽象语法树</li></ul></li><li>拿到抽象语法树后，由ignition库（V8中的库）将<strong>抽象语法树转成字节码</strong>（字节码可跨平台） <ul><li>之所以不直接转为机器指令是因为JS运行环境是无法确定的（比如有可能运行在Mac上的Chrome，也可能运行在Windows上的Chrome），<strong>不同环境的CPU不同，对应的机器码也不同</strong></li></ul></li><li>V8再将字节码转成对应平台的机器指令</li><li>Ignition库会收集函数执行频率等信息，如果执行频率过多，那么就会<strong>由TurboFan库直接变为机器码</strong>，就不用先转为字节码，再变为机器指令了（优化）</li><li>一旦发现下次执行机器指令时操作不同了，那么会进行反向优化，将优化的机器码转成字节码 <ul><li>当优化的代码的变量类型发生变化时，字节码还是会转换成机械码的，比如如下的代码</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Number类型的数据</span></span>
<span class="line"><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Number类型的数据</span></span>
<span class="line"><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Number类型的数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我们这个sum函数的参数一直是两个Number类型的数据相加，这个函数就会被标记为热点函数，就会经过\`TurboFan\`转换成优化的机器码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">777</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Number类型的数据和字符串相加</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但是当string类型和 Number类型相加时，之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码</span></span>
<span class="line"></span></code></pre></div></li></ol><p><a href="https://zhuanlan.zhihu.com/p/47407398" title="图解浏览器" target="_blank" rel="noreferrer">图解浏览器</a></p><p><a href="https://blog.csdn.net/weixin_45792953/article/details/120685545" title="现代浏览器原理" target="_blank" rel="noreferrer">现代浏览器原理</a></p><p><a href="https://segmentfault.com/a/1190000040765165" title="深入理解浏览器中的进程与线程" target="_blank" rel="noreferrer">深入理解浏览器中的进程与线程</a></p><p><a href="https://juejin.cn/post/7047462821352701966" title="浏览器工作原理（浏览器渲染过程+V8引擎原理）" target="_blank" rel="noreferrer">浏览器工作原理（浏览器渲染过程+V8引擎原理）</a><a href="https://juejin.cn/post/6844904175067725838#heading-22" target="_blank" rel="noreferrer">精读 - 浏览器渲染原理</a></p>`,130),x=[j];function P(T,M,w,J,I,V){return s(),a("div",null,x)}const R=l(U,[["render",P]]);export{L as __pageData,R as default};
